@page "/prueba1"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using MudBlazorTemplates4.Models;
@inject MudBlazorTemplates4.Service.IPersonaService personaSer;



<PageTitle>Registro Cliente</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Registro</MudText>


<MudGrid>

    <MudItem xs="16" sm="5">

        <MudPaper Class="pa-4">

            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField T="string" Label="Nombre"  Required="true" RequiredError="El nombre es requerido"/>

                    <MudTextField T="string" Label="Apellido"  Required="true" RequiredError="El Apellido es requerido"/>

                    <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "El email debe tener una @."})"/>

                                  <MudTextField T="string" Label="Telefono" Required="true" RequiredError="El Numero de telefono es requerido."
                                  Validation="@(new Func<string, IEnumerable<string>>(PhoneDigits))"/>


                    <MudTextField T="string" Label="Password" HelperText="Eliga una contraseña mas fuerte" @ref="pwField1"
                                  InputType="InputType.Password"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                  RequiredError="la contraseña es requerida"/>


                    <MudTextField T="string"
                                  Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                                  Validation="@(new Func<string, string>(PasswordMatch))"/>

                    <div class="d-flex align-center justify-space-between">
                        <MudCheckBox T="bool" Required="true" RequiredError="Debe Aceptar Terminos." Label="Acepto Terminos."/>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Registrar</MudButton>
                    </div>
            </MudForm>  
            
  
        </MudPaper>

    </MudItem>

</MudGrid>
<div>
    <MudButton Href= "/listapersonas" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowBackIos" Style="background-color: orangered; color: white; width: 180px; height: 40px;">
       Regresar lista
    </MudButton>
    </div>


@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }
    private IEnumerable<string> PhoneDigits(string pnum)
    {
        if (string.IsNullOrWhiteSpace(pnum))
        {
            yield return "Numero de telefono es requerido!";
            yield break;
        }
        if (pnum.Length != 10)
            yield return "El numero de telefono debe tener por lo menos 10 digitos.";

        if (!Regex.IsMatch(pnum, @"^[0-9]*$"))
            yield return "El numero de telefono solo puede ser digitos";
    }
    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private Persona[] personas;

    Persona persona = new Persona();
    List<Persona> personasT = new List<Persona>();

    protected override void OnInitialized()
    {
        LoadPersonas();
    }

    private void LoadPersonas()
    {

        personasT = new List<Persona>();
        personasT = personaSer.Gets();
    }

    private void GetPersonas(int personaId)
    {
        persona = personaSer.Get(personaId);
    }

    private void DelPersona(int personaId)
    {
        string messagge = personaSer.Delete(personaId);
    }

    private void SavePersona()
    {
        if (persona.IdPersona == 0) persona = personaSer.Save(persona);
        else persona = personaSer.Update(persona);
        LoadPersonas();
    }
}
